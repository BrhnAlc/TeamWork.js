1. Bir aralık zamanlayıcısını durdurma işlevi nedir?
A. stopTimer
B. clearInterval
C. kapatmaZamanlayıcı
D. clearTimer
2. JavaScript'te eşzamansız olarak kod çalıştırmak için 2 yerel işlev nedir?
A. zaman aşımı - setTimeout
B. startInternal - setInterval
C. setTimeout - setInterval
D. interval - setInterval
3. Aşağıdaki kodun çıktısı nedir?
x = 0 olsun;
zaman uyumsuz işlev testi () {
 x += 2 bekliyor;
 konsol.log(x);
}
Ölçek();
x += 1;
konsol.log(x);
2 3
0 1
1 2
D.2 2
TW-07.md 6/14/2023
3 / 7
4. Hangi yöntem JSON verilerini bir JavaScript nesnesine dönüştürür?
A. JSON.fromString();
B.JSON.toObject()
C.JSON.stringify()
D.JSON.parse()
5. Kodunuz için neden eşzamansız bir yapı seçmelisiniz?
A. ES6 sözdizimini kullanmak için
B. Ayrıştırıcıların kodunuzu işlerken tüm JavaScript sözdizimi kurallarını uygulamasını sağlamak için
C. Kodunuzun daha aşağısındaki görevlerin, daha önceki görevler tamamlanana kadar başlatılmadığından emin olmak için
D. Biraz zaman alabilecek görevleri, sonraki görevlerin hemen yürütülmesini engellemeden başlatmak
6. Konsola ne kaydedilecek?
console.log("Ben");
setTimeout(() => {
 console.log("aşk");
}, 0);
console.log("Javascript!");
A.
BEN
Aşk
JavaScript!
B.
BEN
JavaScript!
Aşk
C.
Aşk
BEN
JavaScript!
D. Çıktı, kodun her yürütülmesinde değişebilir ve belirlenemez.
TW-07.md 6/14/2023
4 / 7
7. HTML betik etiketi için "zaman uyumsuz" özniteliği hakkında hangi ifade doğrudur?
A. Hem dahili hem de harici JavaScript kodu için kullanılabilir.
B.Yalnızca dahili JavaScript kodu için kullanılabilir.
C. Yalnızca bir sözü dışa aktaran dahili veya harici JavaScript kodu için kullanılabilir.
D. Yalnızca harici JavaScript kodu için kullanılabilir.
8. "Gösterilen sonuçlar" ne zaman konsola kaydedilir?
let modal = document.querySelector("#result");
setTimeout(işlev () {
 modal.classList.remove("gizli");
}, 10000);
console.log("Sonuçlar gösteriliyor");
hemen
B. 10 saniye sonra
C. 10000 saniye sonra
D. HTTP isteğinden sonuçlar alındıktan sonra
9. İlk Olarak Hangi Kuyruk Yürütülür?
// Geri arama kuyruğu
setTimeout(() => console.log("zaman aşımı"), 0);
// Mikro görev kuyruğu
Promise.resolve().then(() => console.log("söz"));
A. Geri arama kuyruğu
B. Mikro görev kuyruğu
C. Öncelik yok
D. Hangisinin önce arandığına bağlı
10. Bir fonksiyon nasıl kapanış oluşturur?
A. Değer değiştiğinde belgeyi yeniden yükler.
B. Üst kapsamındaki bir değişkene referans döndürür.
C. Geri dönmeden yürütmeyi tamamlar.
D. Yerel bir değişkeni global kapsama kopyalar


11. Aşağıdaki zaman uyumsuz işlevi ve çıktısını göz önünde bulundurun. Ne zaman konsolda ne görüntülenecek?
f() işlevi çağrılıyor mu?
zaman uyumsuz işlev f() {
 let sonuç = 'ilk!';
 söz ver = yeni Söz ver((çöz, reddet) => {
 setTimeout(() => solution('bitti!'), 1000);
 });
 sonuç = söz beklemek;
 console.log(sonuç);
}
F();
A. ilk!
bitti!
C. JavaScript hatası
D.Başka bir şey
12. Çıktı ne olacak?
Promise.resolve('Başarılı!')
 .then(veri => {
 data.toUpperCase()'i döndür
 })
 .then(veri => {
 console.log(veri)
 })
A. "Başarı!" ve "BAŞARI!"
B. "Başarı!"
C. yazdır "BAŞARI!"
D. hiçbir şey yazdırılmaz
Mülakat Soruları 15dk
1. Asenkron programlamanın ne olduğunu açıklayabilir misiniz?
2. Geri arama tabanlı bir işlevi Promise tabanlı bir işleve nasıl dönüştürebilirsiniz?
TW-07.md 6/14/2023
6 / 7
3. Async/await, performans ve ölçeklenebilirliğe nasıl yardımcı olur?
4. JavaScript'te zaman uyumsuz işlev ile normal işlev arasındaki farkı açıklayabilir misiniz?